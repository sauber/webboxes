<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<html> 
<head> 
<meta http-equiv="content-type" content="text/html; charset=utf-8"> 
<title>List reorder w/Bubbling</title> 
 
<style type="text/css"> 
/*margin and padding on body element
  can introduce errors in determining
  element position and are not recommended;
  we turn them off as a foundation for YUI
  CSS treatments. */
body {
	margin:0;
	padding:0;
}
</style> 
 
<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/3.1.1/build/cssfonts/fonts-min.css" /> 
<script type="text/javascript" src="http://yui.yahooapis.com/3.1.1/build/yui/yui-min.js"></script> 
 
<!--there is no custom header content for this example--> 
 
</head> 
 
<body class="yui3-skin-sam  yui-skin-sam"> 
 
<h1>List reorder w/Bubbling</h1> 
 
<div class="exampleIntro"> 
	<p>This example shows how to make a sortable list using Custom Event Bubbling.</p> 
			
</div> 
 
<!--BEGIN SOURCE CODE FOR EXAMPLE =============================== --> 
 
<style type="text/css" media="screen"> 
    .yui3-dd-proxy {
        text-align: left;
    }
    #play {
        border: 1px solid black;
        padding: 10px;
        margin: 10px;
        zoom: 1;
    }
    #play:after { display: block; clear: both; visibility: hidden; content: '.'; height: 0;}
    #play ul {
        border: 1px solid black;
        margin: 10px;
        /* width: 200px; */
        /* height: 300px; */
        /* float: left; */
        padding: 0;
        zoom: 1;
        position: relative;
    }
    #play ul li {
        background-image: none;
        list-style-type: none;
        padding-left: 7px;
        padding: 2px;
        margin: 2px;
        cursor: move;
        zoom: 1;
        position: relative;
    }
    #play ul li.list1 {
        background-color: #8DD5E7;
        border:1px solid #004C6D;
    }
    #play ul li.list2 {
        background-color: #EDFF9F;
        border:1px solid #CDCDCD;
        /* float: left; */
        display: inline;
    }
    #play ul li.critical {
        border:5px solid #004C6D;
    }
    #play ul li.important {
        border:4px solid #004C6D;
    }
    #play ul li.high {
        border:3px solid #004C6D;
    }
    #play ul li.bau {
        border:2px solid #004C6D;
    }
    #play ul li.low {
        border:1px solid #004C6D;
    }
    #play ul li.ficc {
        background-color: #9999FF;
    }
    #play ul li.equity {
        background-color: #FF9999;
    }
    #play ul li.infra {
        background-color: #99FF99;
    }
    #play ul li.gmt {
        background-color: #CCCCCC;
    }
    #play ul li.transition {
        background-color: #FF99FF;
    }
</style> 
 
<div id="play"> 
[% FOREACH queuename IN active.keys.sort -%]
  <h4>[% queuename %]</h4>
  <ul class="list2" id="[% listid %] [% queuename %]"> 
  [% FOREACH project IN active.$queuename -%]
    <li id ="[% project.id %]" class="list2 [% project.color %]">[% project.label %]</li>
  [% END %]
  </ul>
[% END %]
</div> 

<script type="text/javascript"> 
YUI().use('dd-constrain', 'dd-proxy', 'dd-drop', 'io-base', function(Y) {
    //Listen for all drop:over events
    Y.DD.DDM.on('drop:over', function(e) {
        //Get a reference to our drag and drop nodes
        var drag = e.drag.get('node'),
            drop = e.drop.get('node');
        
        //Are we dropping on a li node?
        if (drop.get('tagName').toLowerCase() === 'li') {
            //Are we not going up?
            if (!goingUp) {
                drop = drop.get('nextSibling');
            }
            //Add the node to this list
            e.drop.get('node').get('parentNode').insertBefore(drag, drop);
            //Resize this nodes shim, so we can drop on it later.
            e.drop.sizeShim();
        }
        // Inform server of drop:drophit event
        var uri = "/project/action/drop_over?dropid=" + drop.get('id') + "&dragid=" + drag.get('id') + "&parentid=" + e.drop.get('node').get('parentNode').get('id');
        // var request = Y.io(uri);
    });
    //Listen for all drag:drag events
    Y.DD.DDM.on('drag:drag', function(e) {
        //Get the last y point
        var y = e.target.lastXY[1];
        //is it greater than the lastY var?
        if (y < lastY) {
            //We are going up
            goingUp = true;
        } else {
            //We are going down.
            goingUp = false;
        }
        //Cache for next check
        lastY = y;
        // var uri = "/project/action/drag_drag?goingup=" + goingUp;
        // var request = Y.io(uri);
    });
    //Listen for all drag:start events
    Y.DD.DDM.on('drag:start', function(e) {
        //Get our drag object
        var drag = e.target;
        //Set some styles here
        drag.get('node').setStyle('opacity', '.25');
        drag.get('dragNode').set('innerHTML', drag.get('node').get('innerHTML'));
        drag.get('dragNode').setStyles({
            opacity: '.5',
            borderColor: drag.get('node').getStyle('borderColor'),
            backgroundColor: drag.get('node').getStyle('backgroundColor')
        });
        // Inform server of drop:end event
        // var uri = "/project/action/drag_start?dragid=" + drag.get('node').get('id');
         //var request = Y.io(uri);
    });
    //Listen for a drag:end events
    Y.DD.DDM.on('drag:end', function(e) {
        var drag = e.target;
        var dragnode = drag.get('node');
        if ( dragnode ) {
          var dragid = dragnode.get('id');
          if ( dragnode.get('parentNode') ) {
            var parentid = dragnode.get('parentNode').get('id');
          }
          if ( dragnode.get('nextSibling') ) {
            var nextid = dragnode.get('nextSibling').get('id');
          }
          if ( dragnode.get('previousSibling') ) {
            var previd = dragnode.get('previousSibling').get('id');
          }
        }
        //Put our styles back
        drag.get('node').setStyles({
            visibility: '',
            opacity: '1'
        });
        // Inform server of drop:end event
        var uri = "/project/action/drag_end?dragid=" + dragid + "&nextid=" + nextid + "&previd=" + previd + "&parentid=" + parentid;
         var request = Y.io(uri);
    });
    //Listen for all drag:drophit events
    Y.DD.DDM.on('drag:drophit', function(e) {
        var drop = e.drop.get('node'),
            drag = e.drag.get('node');
 
        //if we are not on an li, we must have been dropped on a ul
        if (drop.get('tagName').toLowerCase() !== 'li') {
            if (!drop.contains(drag)) {
                drop.appendChild(drag);
            }
        }
        // Inform server of drop:drophit event
        // var uri = "/project/action/drag_drophit?dropid=" + drop.get('node').get('id') + "&dragid=" + drag.get('node').get('id');
        // var uri = "/project/action/drag_drophit?dragid=" + drop.get('id');
        // var request = Y.io(uri);
    });
    
    //Static Vars
    var goingUp = false, lastY = 0;
 
    //Get the list of li's in the lists and make them draggable
    var lis = Y.Node.all('#play ul li');
    lis.each(function(v, k) {
        var dd = new Y.DD.Drag({
            node: v,
            target: {
                padding: '0 0 0 20'
            }
        }).plug(Y.Plugin.DDProxy, {
            moveOnEnd: false
        }).plug(Y.Plugin.DDConstrained, {
            constrain2node: '#play'
        });
    });
 
    //Create simple targets for the 2 lists.
    var uls = Y.Node.all('#play ul');
    uls.each(function(v, k) {
        var tar = new Y.DD.Drop({
            node: v
        });
    });
    
});
 
</script> 

[%# USE Dumper %]
[%# Dumper.dump( active ) %]
